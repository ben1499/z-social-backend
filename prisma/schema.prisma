// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String?        @unique
  password              String?
  username              String         @unique
  name                  String
  bio                   String?
  profileImgUrl         String?
  coverImgUrl           String?
  createdAt             DateTime
  posts                 Post[]
  likes                 Like[]
  following             Follow[]       @relation("followedBy")
  followers             Follow[]       @relation("following")
  bookmarks             Bookmark[]
  reposts               Repost[]
  senderNotifications   Notification[] @relation("senderNotify")
  receiverNotifications Notification[] @relation("receiverNotify")
}

model Post {
  id            Int            @id @default(autoincrement())
  content       String
  createdAt     DateTime
  imgUrl        String?
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  replies       Post[]         @relation("SubPosts")
  parentPost    Post?          @relation("SubPosts", fields: [parentPostId], references: [id], onDelete: Cascade)
  parentPostId  Int?
  likes         Like[]
  bookmarks     Bookmark[]
  reposts       Repost[]
  notifications Notification[]
}

model Follow {
  followedById Int
  followingId  Int
  followedBy   User @relation("followedBy", fields: [followedById], references: [id])
  following    User @relation("following", fields: [followingId], references: [id])

  @@id([followedById, followingId])
}

model Like {
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model Bookmark {
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id])

  @@id([postId, userId])
}

model Repost {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime

  @@id([postId, userId])
}

model Notification {
  id         Int              @id @default(autoincrement())
  content    String
  type       NotificationType
  receiver   User             @relation("receiverNotify", fields: [receiverId], references: [id])
  receiverId Int
  sender     User             @relation("senderNotify", fields: [senderId], references: [id])
  senderId   Int
  post       Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
}

enum NotificationType {
  LIKE
  REPOST
  FOLLOW
}
